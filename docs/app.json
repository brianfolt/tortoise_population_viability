[{"name":"app.R","content":"# Gopher tortoise PVA app\n\n# This app can be deployed on GitHub pages using instructions from:\n# https://medium.com/@rami.krispin/deploy-shiny-app-on-github-pages-b4cbd433bdc\n\n# Call a package\nlibrary(popbio)\n\n# Specify two functions from Bruce Kendall's mpmtools package:\n#    'subdiag()' function and 'make_Leslie_matrix()'\nsubdiag <- function(A, sx) {\n  if (is.null(dim(A))) {\n    A <- matrix(0, A, A)\n  }\n  stopifnot(is.matrix(A),\n            length(sx) == 1 | length(sx) == (nrow(A) - 1),\n            nrow(A) == ncol(A))\n  n <- nrow(A)\n  B <- matrix(0, n, n)\n  B[-1, -n] <- diag(sx, n - 1, n - 1)\n  return(B + A)\n}\n\nmake_Leslie_matrix <- function(x, sx = NULL, mx = NULL, model = c(\"pre\", \"post\")) {\n  if(is.data.frame(x)) {\n    stopifnot(c(\"x\", \"sx\", \"mx\") %in% names(x))\n    sx <- x$sx\n    mx <- x$mx\n    x <- x$x\n  }\n  if (length(x) == 1) x <- 0:x\n  \n  # Make prebreeding census model\n  n <- length(x) - 1\n  A <- subdiag(n, sx[2:n])\n  A[n, n] <- sx[n + 1]\n  A[1, ] <- sx[1] * mx[-1]\n  \n  if (model[1] == \"post\") A <- suppressWarnings(pre_to_post(sx[1], A))\n  \n  return(A)\n}\n\n##### Specify the UI -----\nui <- fluidPage(\n\n    #includeMarkdown(\"header.Rmd\"),\n  \n    p(em(\"Gopherus polyphemus\"), \"(gopher tortoise) populations experience varying demographic conditions across the species' range in the southeastern United States. This page comprises a flexible tool that allows users to simulate tortoise population growth and dynamics under varying conditions of demographic rates. Specifically, populations experience latitudinal variation in maturity age and fecundity, where more southern populations have faster somatic growth rates, reach sexual maturity at young ages, and lay larger clutches of eggs likely due to increased energy assimilation. To accommodate variation in life history, the user can adjust mean estimates of maturity age, fecundity (clutch size), and survival rates of different life history stages (nests, hatchlings, juveniles, adults). The juvenile stage includes all 1-year old animals up to the year prior to the maturity age. The software flexibly 'unwinds' the demographic rates to appropriate ages and projects the population using an age-based model The model is a female-only model and assumes a pre-breeding census.\"),\n    sidebarLayout(\n      sidebarPanel(\n        h4(p(strong(\"Demographic Rates\"))),\n        numericInput(\"ma\", \"Age of maturity:\", 18, min = 5, max = 30),\n        numericInput(\"bp\", \"Probability of laying eggs:\", 0.97, 0, 1, step=0.01),\n        numericInput(\"f\", \"Clutch size:\", 6, 0, 25, step=1),\n        numericInput(\"ns\", \"Probability of nest survival:\", 0.35, 0, 1, step=0.01),\n        numericInput(\"ve\", \"Probability of egg viability:\", 0.85, 0, 1, step=0.01),\n        numericInput(\"pf\", \"Probability of female:\", 0.5, 0, 1, step=0.01),\n        numericInput(\"s_h\", \"Probability of hatchling survival:\", 0.13, 0, 1, step=0.01),\n        numericInput(\"s_j\", \"Probability of juvenile survival:\", 0.8, 0, 1, step=0.01),\n        numericInput(\"s_a\", \"Probability of adult survival:\", 0.98, 0, 1, step=0.01),\n        numericInput(\"n\", \"Initial population size:\", 50, 0, 10000, step=1),\n        br(),\n        h4(p(strong(\"Simulation Inputs\"))),\n        numericInput(\"nyears\", \"Projection interval (years)\", 50, 1, 100),\n        numericInput(\"nreps\", \"Number of simulation replicates\", 10, 5, 50),\n        br(),\n        actionButton(\"run\", \"Perform simulation\",\n                     class = \"btn-success\",\n                     style=\"color: #fff; background-color: #337ab7; border-color: #2e6da4\")\n        ),\n      \n      mainPanel(\n        br(),\n        plotOutput(\"nplot\"),\n        br(),\n        verbatimTextOutput(\"lambda_title\"),\n        verbatimTextOutput(\"lambda\"),\n        br(),\n        verbatimTextOutput(\"gt_title\"),\n        verbatimTextOutput(\"gentime\"),\n        br(),\n        verbatimTextOutput(\"ssd_title\"),\n        verbatimTextOutput(\"ssd\"),\n        br(),\n        verbatimTextOutput(\"rv_title\"),\n        verbatimTextOutput(\"rv\"),\n        br(),\n        verbatimTextOutput(\"elas_title\"),\n        verbatimTextOutput(\"elas\")\n        ),\n      \n    ), #sidebar\n    \n    #includeMarkdown(\"footer.Rmd\")\n    p(\"See Folt et al. 2022 \",em(\"Global Ecology and Conservation\"), \" for a review of geographic variation of tortoise demographic rates. Note that paper used estimates of 'apparent survival', whereas this model assumes true survival.\")\n    \n  )\n  \nserver <- function(input, output, session) {\n  \n    dat <- eventReactive(input$run, {\n      \n      # Use 'req()' to require certain inputs to perform simulations\n      req(input$ma, input$bp, input$f, input$ns, input$ve, input$pf,\n          input$s_h, input$s_j, input$s_a,\n          # Simulation inputs\n          input$nyears, input$nreps)\n      \n      withProgress(message = \"Simulating population growth...\", {\n      \n      library(statmod)\n    \n      ### 1) Specify User Inputs \n      \n      # Population parameters\n      ma <- input$ma\n      bp <- input$bp\n      f <- input$f\n      ns <- input$ns\n      ve <- input$ve\n      pf <- input$pf\n      s_h <- input$s_h\n      s_j <- input$s_j\n      s_a <- input$s_a\n      \n      # Create a demography schedule, with juvenile and mature age classes\n      # The model has a pre-breeding census\n      ma <- ma + 1\n      demog_sched <- data.frame(x = 1:ma,\n                                sx = rep(NA, length(1:ma)),\n                                mx = rep(NA, length(1:ma)))\n      \n      # Specify productivity of juvenile and adult females\n      demog_sched[1:(ma-1), \"mx\"] <- 0\n      \n      # Specify productivity of juvenile and adult females\n      demog_sched[ma, \"mx\"] <- bp * f * ns * ve * pf *s_h\n\n      # Specify juvenile and adult survival rates\n      demog_sched[1:(ma-1), \"sx\"] <- s_j\n      demog_sched[ma, \"sx\"] <- s_a\n      \n      \n      # Construct a Leslie matrix from this demography schedule\n      A <- make_Leslie_matrix(demog_sched)\n      \n      ## Demographic features\n      \n      # Calculate the asymptotic growth rate of the population governed by this \n      #   demography schedule:\n      lam <- popbio::lambda(A)\n      ssd <- popbio::stable.stage(A) # Stable stage (age) distribution\n      names(ssd) <- paste0(\"Age_\", 1:length(ssd))\n      generation.time <- popbio::generation.time(A) # Generation time\n      rv <- popbio::reproductive.value(A)  # Reproductive value\n      names(rv) <- paste0(\"Age_\", 1:length(rv))\n      elas <- popbio::elasticity(A) # Elasticity values\n      elas.values <- round(c(diag(elas[-1,]), elas[ma-1,ma-1], elas[1,ma-1]), 3)\n      names(elas.values) <- c(paste0(\"S_\", 1:(length(elas.values)-1)), \"Fecundity\")\n      \n      # Save the demographic variables together\n      demo_vars <- list(lam, ssd, generation.time, rv, elas.values)\n      \n      \n      ### Project and track population structure\n      \n      # Starting population size\n      n <- input$n\n      \n      # Simulation parameters\n      nyears <- input$nyears\n      nreps <- input$nreps\n      \n      nstages <- dim(A)[1]\n      \n      # Matrices to save population size and structure\n      N_tot <- matrix(0, nyears, nreps)\n      N_stages <- array(0, c(nyears, nreps, nstages))\n      # array to save population structure across years, reps, and ages\n      \n      ## Initial population size and structure\n      # What is the stable-stage distribution (SSD) of the matrix\n      ssd <- stable.stage(A)\n      \n      # How many individuals in the population?\n      n <- 50\n      \n      # Spread individuals across the SSD\n      n_ssd <- ssd * n\n      \n      # Use poisson draws to randomly populate numbers per stage for each simulation\n      #   replicate\n      n_i <- matrix(NA, nreps, dim(A)[1])\n      for (i in 1:nreps){\n        n_i[i,]  <- rpois(length(n_ssd), n_ssd)\n      }\n      # rowSums(n_i) # usually between 40-60 females to start\n      \n      ## Partition matrix for simulation\n      x <- splitA(A)\n      x_T <- x$T\n      x_F <- x$F\n      \n      ## Run the simulation!\n      for (j in 1:nreps){ # for each replicate\n        n_i_j <- n_i[j,] # specify initial population size, randomly drawn above\n        for (i in 1:nyears){ # for each year\n          # If it's the first year, specify n_i_j; else,\n          #   specify N_stage from previous year\n          if(i == 1){\n            n_sim <- n_i_j\n          } else {\n              n_sim <- N_stages[i-1,j,]\n              }\n          N_stages[i,j,] <- multiresultm(n_sim, x_T, x_F) # project pop\n          N_tot[i,j] <- sum(N_stages[i,j,]) # save N\n        } #year\n      } #rep\n      \n      # Save a vector of demographic rate titles\n      demo_titles <- c(c(\"Population growth rate (lambda):\"),\n                       c(\"Generation time (years):\"),\n                       c(\"Stable age distribution:\"),\n                       c(\"Reproductive value of ages:\"),\n                       c(\"Elasticities for demographic rates:\")\n                       )\n      \n      ### Save the data so they can be used\n      list(N_tot, demo_vars, demo_titles)\n      \n  }) # end-withProgress\n}) # end-dat\n    \n## Create an output object where we will save all the graphs and tables\n##  from the Basic Tool\ngraphs <- reactiveValues(nplot = NULL, table1 = NULL)\n\n## Summary graph 1 - abundance ------------\noutput$nplot <- renderPlot({\n  \n  # Call the data from the simulation run\n  N_tot <- dat()[[1]]\n  \n  # Load ggplot2\n  library(ggplot2)\n  \n  # Convert the matrix to a data frame\n  df <- as.data.frame(N_tot)\n  \n  # Add a column for time (years)\n  df$Time <- 1:50  # Assuming 50 years based on the matrix dimensions\n  \n  # Reshape the data to long format\n  df_long <- tidyr::gather(df, key = \"Population\", value = \"Count\", -Time)\n  \n  # Create a ggplot with a logarithmic y-axis\n  graphs$nplot <- ggplot(df_long, aes(x = Time, y = Count, color = Population)) +\n    geom_line(size = 1.5) +\n    labs(x = \"Time (years)\", y = \"Population size (females\") +\n    ylim(0, max(N_tot)) +\n    theme_minimal() +\n    theme(legend.position = \"none\",  # Remove the legend\n          axis.title = element_text(size = 18),\n          axis.line = element_line(size = 1.25),\n          axis.text = element_text(size = 14, color = 1))\n         \n  \n  # Print the graph\n  graphs$nplot\n\n})\n\n## Summary text - lambdaa\noutput$lambda_title <- renderText({\n  \n  # Recall the parameter name\n  demo_titles <- dat()[[3]]\n  demo_titles[1]\n\n})\n\n\n## Summary text - lambdaa\noutput$lambda <- renderText({\n  \n  # Recall some parameters\n  demo_vars <- dat()[[2]]\n  \n  # Save lambda\n  round(demo_vars[[1]], 3)\n\n})\n\n## Summary text - generation time\noutput$gt_title <- renderText({\n  \n  # Recall the parameter name\n  demo_titles <- dat()[[3]]\n  demo_titles[2]\n  \n})\n\n## Summary text - generation time\noutput$gentime <- renderText({\n  \n  # Recall some parameters\n  demo_vars <- dat()[[2]]\n  \n  # Save GT\n  round(demo_vars[[3]], 1)\n  \n})\n\n## Summary text - stable stage distribution\noutput$ssd_title <- renderText({\n  \n  # Recall the parameter name\n  demo_titles <- dat()[[3]]\n  demo_titles[3]\n  \n})\n\n## Summary text - stable stage distribution\noutput$ssd <- renderText({\n  \n  # Recall some parameters\n  demo_vars <- dat()[[2]]\n  \n  # SSD\n  ssd <- demo_vars[[2]]\n  \n  # Save\n  t(data.frame(names(ssd), round(ssd, 2)))\n  \n})\n\n\n## Summary text - repro value\noutput$rv_title <- renderText({\n  \n  # Recall the parameter name\n  demo_titles <- dat()[[3]]\n  demo_titles[4]\n  \n})\n\n## Summary text - reproductive value\noutput$rv <- renderText({\n  \n  # Recall some parameters\n  demo_vars <- dat()[[2]]\n  \n  # RV\n  rv <- demo_vars[[4]]\n  \n  # Save \n  t(data.frame(names(rv), round(rv, 2)))  \n  \n})\n\n\n## Summary text - elasticities\noutput$elas_title <- renderText({\n  \n  # Recall the parameter name\n  demo_titles <- dat()[[3]]\n  demo_titles[5]\n  \n})\n\n## Summary text - elasticities\noutput$elas <- renderText({\n  \n  # Recall some parameters\n  demo_vars <- dat()[[2]]\n  \n  # Elasticities\n  elas <- demo_vars[[5]]\n  \n  # Save text\n  t(data.frame(names(elas), round(elas, 2)))\n\n})\n\n\n}\n\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"footer.Rmd","content":"---\noutput: html_document\n---\nSee Folt et al. 2022 *Global Ecology and Conservation* for a review of geographic variation of tortoise demographic rates. Note that paper used estimates of 'apparent survival', whereas this model assumes true survival.","type":"text"},{"name":"header.Rmd","content":"---\noutput: html_document\n---\nGopher tortoise (*Gopherus polyphemus*) populations experience varying demographic conditions across the species' range in the southeastern United States. This page comprises a flexible tool that allows users to simulate tortoise population growth and dynamics under varying conditions of demographic rates. Specifically, populations experience latitudinal variation in maturity age and fecundity, where more southern populations have faster somatic growth rates, reach sexual maturity at young ages, and lay larger clutches of eggs likely due to increased energy assimilation. To accommodate variation in life history, the user can adjust mean estimates of maturity age, fecundity (clutch size), and survival rates of different life history stages (nests, hatchlings, juveniles, adults). The juvenile stage includes all 1-year old animals up to the year prior to the maturity age. The software flexibly 'unwinds' the demographic rates to appropriate ages and projects the population using an age-based model The model is a female-only model and assumes a pre-breeding census.","type":"text"},{"name":"styles.css","content":"@import url(//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600);\n\nbody {\n  overflow-y: scroll;\n  padding-bottom: 20px;\n}\n\nbody {\n  font-family: Source Sans Pro;\n  color: #444;\n  font-weight: 300;\n}\n\n#map {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 400;\n}\n\n#data table {\n  width: 100%;\n}\n#data td+td {\n  width: 80px;\n}\n\n.container-fluid {\n  padding-top: 400px;\n}\n\n#desc { font-size: 16px; }\n\n#desc span {\n  color: #944;\n  font-weight: 400;\n}\n\n","type":"text"}]
